// Code generated by MockGen. DO NOT EDIT.
// Source: database/postgres.go

// Package mock_database is a generated GoMock package.
package mock_database

import (
	reflect "reflect"
	database "wallet/database"

	gomock "github.com/golang/mock/gomock"
)

// MockPostgresClient is a mock of PostgresClient interface.
type MockPostgresClient struct {
	ctrl     *gomock.Controller
	recorder *MockPostgresClientMockRecorder
}

// MockPostgresClientMockRecorder is the mock recorder for MockPostgresClient.
type MockPostgresClientMockRecorder struct {
	mock *MockPostgresClient
}

// NewMockPostgresClient creates a new mock instance.
func NewMockPostgresClient(ctrl *gomock.Controller) *MockPostgresClient {
	mock := &MockPostgresClient{ctrl: ctrl}
	mock.recorder = &MockPostgresClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostgresClient) EXPECT() *MockPostgresClientMockRecorder {
	return m.recorder
}

// CreateOrInsertWallet mocks base method.
func (m *MockPostgresClient) CreateOrInsertWallet(req database.CreateWalletReqDb) (database.CreateWalletResDb, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrInsertWallet", req)
	ret0, _ := ret[0].(database.CreateWalletResDb)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrInsertWallet indicates an expected call of CreateOrInsertWallet.
func (mr *MockPostgresClientMockRecorder) CreateOrInsertWallet(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrInsertWallet", reflect.TypeOf((*MockPostgresClient)(nil).CreateOrInsertWallet), req)
}

// DisableWallet mocks base method.
func (m *MockPostgresClient) DisableWallet(req database.DisableWalletReqDb) (database.DisableWalletResDb, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableWallet", req)
	ret0, _ := ret[0].(database.DisableWalletResDb)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableWallet indicates an expected call of DisableWallet.
func (mr *MockPostgresClientMockRecorder) DisableWallet(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableWallet", reflect.TypeOf((*MockPostgresClient)(nil).DisableWallet), req)
}

// EnableWallet mocks base method.
func (m *MockPostgresClient) EnableWallet(req database.EnableWalletReqDb) (database.EnableWalletResDb, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableWallet", req)
	ret0, _ := ret[0].(database.EnableWalletResDb)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableWallet indicates an expected call of EnableWallet.
func (mr *MockPostgresClientMockRecorder) EnableWallet(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableWallet", reflect.TypeOf((*MockPostgresClient)(nil).EnableWallet), req)
}

// GetWallet mocks base method.
func (m *MockPostgresClient) GetWallet(req database.GetWalletReqDb) (database.GetWalletResDb, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWallet", req)
	ret0, _ := ret[0].(database.GetWalletResDb)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWallet indicates an expected call of GetWallet.
func (mr *MockPostgresClientMockRecorder) GetWallet(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWallet", reflect.TypeOf((*MockPostgresClient)(nil).GetWallet), req)
}

// InsertTransaction mocks base method.
func (m *MockPostgresClient) InsertTransaction(req database.InsertTransactionReqDb) (database.InsertTransactionResDb, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTransaction", req)
	ret0, _ := ret[0].(database.InsertTransactionResDb)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertTransaction indicates an expected call of InsertTransaction.
func (mr *MockPostgresClientMockRecorder) InsertTransaction(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTransaction", reflect.TypeOf((*MockPostgresClient)(nil).InsertTransaction), req)
}

// ListTransactions mocks base method.
func (m *MockPostgresClient) ListTransactions(req database.ListTransactionsReqDb) (database.ListTransactionsResDb, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransactions", req)
	ret0, _ := ret[0].(database.ListTransactionsResDb)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransactions indicates an expected call of ListTransactions.
func (mr *MockPostgresClientMockRecorder) ListTransactions(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactions", reflect.TypeOf((*MockPostgresClient)(nil).ListTransactions), req)
}
